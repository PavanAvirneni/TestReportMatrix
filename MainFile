import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        hero: "bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-elegant transition-all duration-300 border-0",
        success: "bg-success text-success-foreground hover:bg-success/90",
        warning: "bg-warning text-warning-foreground hover:bg-warning/90",
        error: "bg-error text-error-foreground hover:bg-error/90",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


import React, { useState } from 'react';
import { FileUpload } from '@/components/FileUpload';
import { TestMatrix } from '@/components/TestMatrix';
import { TestSummary } from '@/components/TestSummary';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { BarChart3, FileSpreadsheet, Download, RefreshCw } from 'lucide-react';

interface TestData {
  Name: string;
  'Test Item ID': string;
  Verdict: string;
  'Verdict Comment': string;
  Tester: string;
  Date: string;
}

const Index = () => {
  const [testData, setTestData] = useState<TestData[]>([]);
  const [loading, setLoading] = useState(false);

  const handleDataLoad = (data: TestData[]) => {
    setLoading(true);
    // Simulate processing time for better UX
    setTimeout(() => {
      setTestData(data);
      setLoading(false);
    }, 500);
  };

  const handleReset = () => {
    setTestData([]);
  };

  const handleExportReport = () => {
    // Import XLSX dynamically since it's already installed
    import('xlsx').then((XLSX) => {
      // Create a new workbook
      const wb = XLSX.utils.book_new();
      
      // Sheet 1: Raw test data
      const rawDataSheet = XLSX.utils.json_to_sheet(testData);
      XLSX.utils.book_append_sheet(wb, rawDataSheet, 'Test Data');
      
      // Sheet 2: Summary statistics for charts
      const verdictStats = testData.reduce((acc, test) => {
        const verdict = (test.Verdict || '').toLowerCase();
        if (verdict.includes('pass') || verdict.includes('success')) {
          acc.passed += 1;
        } else if (verdict.includes('fail') || verdict.includes('error')) {
          acc.failed += 1;
        } else {
          acc.none += 1;
        }
        return acc;
      }, { passed: 0, failed: 0, none: 0 });

      const summaryData = [
        { Metric: 'Total Tests', Value: testData.length },
        { Metric: 'Passed Tests', Value: verdictStats.passed },
        { Metric: 'Failed Tests', Value: verdictStats.failed },
        { Metric: 'Other/Pending Tests', Value: verdictStats.none },
        { Metric: 'Pass Rate (%)', Value: testData.length > 0 ? ((verdictStats.passed / testData.length) * 100).toFixed(1) : '0' }
      ];
      
      const summarySheet = XLSX.utils.json_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(wb, summarySheet, 'Summary');
      
      // Sheet 3: Tester performance data
      const testerStats = testData.reduce((acc, test) => {
        const tester = test.Tester || 'Unknown';
        acc[tester] = (acc[tester] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

      const testerData = Object.entries(testerStats).map(([tester, count]) => ({
        Tester: tester,
        'Total Tests': count,
        'Passed Tests': testData.filter(t => (t.Tester || 'Unknown') === tester && ((t.Verdict || '').toLowerCase().includes('pass') || (t.Verdict || '').toLowerCase().includes('success'))).length,
        'Failed Tests': testData.filter(t => (t.Tester || 'Unknown') === tester && ((t.Verdict || '').toLowerCase().includes('fail') || (t.Verdict || '').toLowerCase().includes('error'))).length,
        'Other Tests': testData.filter(t => (t.Tester || 'Unknown') === tester && !((t.Verdict || '').toLowerCase().includes('pass') || (t.Verdict || '').toLowerCase().includes('success') || (t.Verdict || '').toLowerCase().includes('fail') || (t.Verdict || '').toLowerCase().includes('error'))).length,
        'Pass Rate (%)': count > 0 ? ((testData.filter(t => (t.Tester || 'Unknown') === tester && ((t.Verdict || '').toLowerCase().includes('pass') || (t.Verdict || '').toLowerCase().includes('success'))).length / count) * 100).toFixed(1) : '0'
      }));
      
      const testerSheet = XLSX.utils.json_to_sheet(testerData);
      XLSX.utils.book_append_sheet(wb, testerSheet, 'Tester Performance');
      
      // Sheet 4: Verdict distribution for pie chart
      const verdictDistribution = [
        { Status: 'Passed', Count: verdictStats.passed, Percentage: testData.length > 0 ? ((verdictStats.passed / testData.length) * 100).toFixed(1) : '0' },
        { Status: 'Failed', Count: verdictStats.failed, Percentage: testData.length > 0 ? ((verdictStats.failed / testData.length) * 100).toFixed(1) : '0' },
        { Status: 'Other/Pending', Count: verdictStats.none, Percentage: testData.length > 0 ? ((verdictStats.none / testData.length) * 100).toFixed(1) : '0' }
      ];
      
      const verdictSheet = XLSX.utils.json_to_sheet(verdictDistribution);
      XLSX.utils.book_append_sheet(wb, verdictSheet, 'Verdict Distribution');
      
      // Generate filename with current date
      const now = new Date();
      const filename = `test-report-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;
      
      // Write and download the file
      XLSX.writeFile(wb, filename);
    });
  };

  const generateSampleData = () => {
    const sampleData: TestData[] = [
      {
        Name: "Login Functionality Test",
        "Test Item ID": "TC001",
        Verdict: "Pass",
        "Verdict Comment": "User can successfully log in with valid credentials",
        Tester: "John Doe",
        Date: "2024-01-15"
      },
      {
        Name: "Password Reset Test",
        "Test Item ID": "TC002", 
        Verdict: "Pass",
        "Verdict Comment": "Password reset email sent successfully",
        Tester: "Jane Smith",
        Date: "2024-01-16"
      },
      {
        Name: "File Upload Test",
        "Test Item ID": "TC003",
        Verdict: "Fail", 
        "Verdict Comment": "Large files timeout during upload",
        Tester: "Bob Johnson",
        Date: "2024-01-17"
      },
      {
        Name: "Database Connection Test",
        "Test Item ID": "TC004",
        Verdict: "Pass",
        "Verdict Comment": "Connection established successfully",
        Tester: "Alice Brown",
        Date: "2024-01-18"
      },
      {
        Name: "API Response Test",
        "Test Item ID": "TC005",
        Verdict: "Pending",
        "Verdict Comment": "Waiting for API endpoint to be available",
        Tester: "Charlie Wilson",
        Date: "2024-01-19"
      }
    ];
    handleDataLoad(sampleData);
  };

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-7xl mx-auto space-y-8">
        
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-3 mb-4">
            <BarChart3 className="w-8 h-8" style={{ color: '#6366f1' }} />
            <h1 className="text-4xl font-bold" style={{ color: '#1f2937' }}>
              Test Report Matrix
            </h1>
          </div>
          <p className="text-lg max-w-2xl mx-auto" style={{ color: '#6b7280' }}>
            Upload your Excel test reports and get comprehensive visual analysis of test results, 
            team performance, and quality metrics.
          </p>
        </div>

        {/* Main Content */}
        {testData.length === 0 ? (
          <div className="space-y-6">
            <FileUpload onDataLoad={handleDataLoad} />
            
            {/* Sample Data Option */}
            <Card className="glass-effect shadow-card text-center">
              <CardContent className="p-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Want to try it out?</h3>
                  <p className="text-muted-foreground">
                    Generate sample test data to explore the features
                  </p>
                  <Button 
                    onClick={generateSampleData} 
                    variant="hero" 
                    className="mx-auto"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <RefreshCw className="w-4 h-4 animate-spin" />
                        Processing...
                      </>
                    ) : (
                      <>
                        <FileSpreadsheet className="w-4 h-4" />
                        Generate Sample Data
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Action Bar */}
            <div className="flex flex-col sm:flex-row gap-4 justify-between items-center">
              <div className="flex items-center gap-2">
                <FileSpreadsheet className="w-5 h-5 text-primary" />
                <span className="font-medium">
                  {testData.length} test records loaded
                </span>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={handleReset}>
                  <RefreshCw className="w-4 h-4" />
                  Load New File
                </Button>
                <Button variant="hero" onClick={handleExportReport}>
                  <Download className="w-4 h-4" />
                  Export Report
                </Button>
              </div>
            </div>

            {/* Tabs for different views */}
            <Tabs defaultValue="summary" className="space-y-6">
              <TabsList className="grid w-full grid-cols-2 max-w-md mx-auto">
                <TabsTrigger value="summary" className="flex items-center gap-2">
                  <BarChart3 className="w-4 h-4" />
                  Summary
                </TabsTrigger>
                <TabsTrigger value="matrix" className="flex items-center gap-2">
                  <FileSpreadsheet className="w-4 h-4" />
                  Matrix View
                </TabsTrigger>
              </TabsList>

              <TabsContent value="summary" className="space-y-6">
                <TestSummary data={testData} />
              </TabsContent>

              <TabsContent value="matrix" className="space-y-6">
                <TestMatrix data={testData} />
              </TabsContent>
            </Tabs>
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;
