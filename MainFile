import React, { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload, FileSpreadsheet } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import * as XLSX from 'xlsx';

interface FileUploadProps {
  onDataLoad: (data: any[]) => void;
}

export const FileUpload: React.FC<FileUploadProps> = ({ onDataLoad }) => {
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = e.target?.result;
          const workbook = XLSX.read(data, { type: 'binary' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          
          // Convert to objects with proper headers
          const jsonData2D = jsonData as any[][];
          let headerRow = jsonData2D[0] as string[];
          let dataStartRow = 1;
          
          // Define required columns in order
          const requiredColumns = ['Name', 'Test Item ID', 'Verdict', 'Verdict Comment', 'Tester', 'Date'];
          
          // Check if required columns exist in first row, if not check second row
          const hasRequiredColumns = (headers: string[]) => {
            return requiredColumns.some(reqCol => 
              headers.some(header => 
                header && header.toString().toLowerCase().trim() === reqCol.toLowerCase()
              )
            );
          };
          
          if (!hasRequiredColumns(headerRow) && jsonData2D.length > 1) {
            // Try second row as headers
            headerRow = jsonData2D[1] as string[];
            dataStartRow = 2;
          }
          
          const rows = jsonData2D.slice(dataStartRow);
          
          // Find the index of "Name" column
          const nameColumnIndex = headerRow.findIndex(header => 
            header && header.toString().toLowerCase().trim() === 'name'
          );
          
          if (nameColumnIndex === -1) {
            console.error('Name column not found in Excel file');
            return;
          }
          
          // Map required columns to their indices in the Excel file
          const columnMapping: { [key: string]: number } = {};
          requiredColumns.forEach(reqCol => {
            const index = headerRow.findIndex(header => 
              header && header.toString().toLowerCase().trim() === reqCol.toLowerCase()
            );
            if (index !== -1) {
              columnMapping[reqCol] = index;
            }
          });
          
          const parsedData = rows.map(row => {
            // Check if the cell next to "Name" column has content
            const testCaseName = row[nameColumnIndex + 1];
            
            // More robust check for empty cells - ignore undefined, null, empty string, whitespace, numbers that are 0, etc.
            if (!testCaseName || 
                testCaseName === '' || 
                (typeof testCaseName === 'string' && testCaseName.trim() === '') ||
                testCaseName === null ||
                testCaseName === undefined) {
              return null; // Skip this row
            }
            
            // Also check if Test Item ID is valid
            const testItemId = columnMapping['Test Item ID'] !== undefined ? row[columnMapping['Test Item ID']] : '';
            if (!testItemId || 
                testItemId === '' || 
                (typeof testItemId === 'string' && testItemId.trim() === '') ||
                testItemId === null ||
                testItemId === undefined) {
              return null; // Skip this row if Test Item ID is empty
            }
            
            const obj: any = {};
            requiredColumns.forEach(column => {
              if (column === 'Name') {
                // Use the cell next to "Name" column for testcase name
                obj[column] = testCaseName;
              } else if (columnMapping[column] !== undefined) {
                obj[column] = row[columnMapping[column]] || '';
              } else {
                obj[column] = '';
              }
            });
            return obj;
          }).filter(row => row !== null); // Remove null entries
          
          onDataLoad(parsedData);
        } catch (error) {
          console.error('Error parsing Excel file:', error);
        }
      };
      reader.readAsBinaryString(file);
    }
  }, [onDataLoad]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'application/vnd.ms-excel': ['.xls']
    },
    multiple: false
  });

  return (
    <Card className="glass-effect shadow-card hover:shadow-elegant transition-all duration-300">
      <div
        {...getRootProps()}
        className={`p-8 text-center cursor-pointer rounded-lg transition-all duration-300 ${
          isDragActive 
            ? 'bg-primary/10 border-primary border-2 border-dashed' 
            : 'border-2 border-dashed border-border hover:border-primary/50'
        }`}
      >
        <input {...getInputProps()} />
        <div className="flex flex-col items-center space-y-4">
          {isDragActive ? (
            <FileSpreadsheet className="w-16 h-16 text-primary animate-bounce" />
          ) : (
            <Upload className="w-16 h-16 text-muted-foreground" />
          )}
          <div>
            <h3 className="text-lg font-semibold mb-2">
              {isDragActive ? 'Drop your Excel file here' : 'Upload Test Report'}
            </h3>
            <p className="text-muted-foreground mb-4">
              Drop your Excel file here, or click to select
            </p>
            <Button variant="outline" className="mx-auto">
              Select File
            </Button>
          </div>
          <div className="text-xs text-muted-foreground">
            <p>Supported formats: .xlsx, .xls</p>
            <p>Required columns: Name, Test Item ID, Verdict, Verdict Comment, Tester, Date</p>
          </div>
        </div>
      </div>
    </Card>
  );
};
